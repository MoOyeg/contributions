#!/bin/bash
# This script pulls out a report on CVEs affecting all images in one or all namespaces
# Requires ROX_ENDPOINT and ROX_API_TOKEN environment variables
# Requires analyst access or more in ACS
# Usage: $0 name-of-namespace-to-scan | nothing-which-scans-all-namespaces
# Magnus Glantz, sudo@redhat.com, 2021, with great help from Neil Carpenter 
# and inspiration from https://github.com/stackrox/contributions/blob/main/util-scripts/violations-to-csv/violations-to-csv.sh


#! /bin/bash
# This script builds a CSV file from for the active deployments on the violations page.
# Requires ROX_ENDPOINT and ROX_API_TOKEN environment variables
################################


case $1 in
	*help)
		echo "$0 cluster-name|nothing-to-scan-all-namespaces"
		;;
esac

if [[ -z "${ROX_ENDPOINT}" ]]; then
  echo >&2 "ROX_ENDPOINT must be set"
  exit 1
fi

if [[ -z "${ROX_API_TOKEN}" ]]; then
  echo >&2 "ROX_API_TOKEN must be set"
  exit 1
fi

if [[ -z "${1}" ]]; then
	all_clusters=1
else
	all_clusters=0
	cluster=$1
fi

# create the output file
echo '["CVE", "CVSS Score", "Summary", "Link", "Component", "Version"], (.scan.components | .[] | . as $component | .vulnerabilities[] | [.cveBaseInfo.cve, .cvss, .cveBaseInfo.summary, .cveBaseInfo.link, $component.name, $component.version]) | @csv' > nodes_query

function curl_central() {
  curl -sk -H "Authorization: Bearer ${ROX_API_TOKEN}" "https://${ROX_ENDPOINT}/$1"
}

# Gather CVEs for nodes in all clusters

if [ -f results.json ]; then
	rm -f results.json
fi

if [[ "$all_clusters" -eq 1 ]]; then
	for clusterid in $(curl_central "v1/clusters" | jq -r ".clusters[].id")
	do
		for nodeid in $(curl_central "v1/nodes/${clusterid}"|jq -r ".nodes[].id")
		do
			curl_central v1/nodes/${clusterid}/${nodeid}|jq >>results.json
		done
	done
elif [[ "$all_clusters" -eq 0 ]]; then
	for nodeid in $(curl_central "v1/nodes/${clusterid}"|jq -r ".nodes[].id")
	do
		echo "We are in $clusterid looking at $nodeid"
		curl_central v1/nodes/${clusterid}/{$nodeid}|jq >>results.json
	done
fi

jq -r  -f nodes_query results.json
